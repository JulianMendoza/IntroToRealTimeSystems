#include <msp.h>

int main(){
	//disable the watchdog timer
WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD; 
	//Set SEL0 and SEL1 to 0
	P1->SEL0&=(uint8_t)(~((1<<0)|(1<<1)|(1<<4)));
	P1->SEL1&=(uint8_t)(~((1<<0)|(1<<1)|(1<<4)));
	P2->SEL0&=(uint8_t)(~((1<<0)|(1<<1)|(1<<2)));
	P2->SEL1&=(uint8_t)(~((1<<0)|(1<<1)|(1<<2)));
	//Configure the switches P1.1 and P1.4 as inputs using pull-up resistors
	//DIR 0 REN 1 OUT 1
	P1->DIR&=(uint8_t)(~((1<<1)|(1<<4)));
	P1->REN|=(uint8_t)((1<<1)|(1<<4));
	P1->OUT|=(uint8_t)((1<<1)|(1<<4));
	//Configure the LEDs (P1.0 and P2.0, P2.1, P2.2) as outputs.
	//DIR 1
	P1->DIR|=(uint8_t)(1<<0);
	P2->DIR|=(uint8_t)((1<<0)|(1<<1)|(1<<2));
	//Initialize LEDs states (all turned off).
	P1->OUT&=(uint8_t)(~(1<<0));
	P2->OUT&=(uint8_t)(~((1<<0)|(1<<1)|(1<<2)));
	//Create an infinite loop ("while (1)") after your configurations, where the remaining logic should be implemented.
	//Continuously poll the switches (with debouncing)
	//When Button 1 is pressed, the selected LED changes (default, RED LED).
	//When Button 2 is pressed, the current LED changes state.
	
	uint8_t toggle=0x0; //default to RED LED
	#define BUTTON1 (P1IN & 0x2) 
	#define BUTTON2 (P1IN & 0x10)
	#define LED1 P1OUT
	#define LED2 P2OUT

			while(1){
			
				int i =100;
				while(BUTTON1 && BUTTON2){} //do nothing

				while(i>0){i--;} //delay loop
				if(BUTTON1 && BUTTON2){
					continue;
				}else{
					// P2->OUT=0x01; //if this is on and nothing is pressed, it didn't work FIXED
					if(~BUTTON1&&BUTTON2){
						//button 1 is pressed
						toggle^=0x01;
					}else if(BUTTON1&&~BUTTON2){
						//button 2 is pressed
					if(toggle==0x00){
						LED1^=0x01;
					}else if(toggle==0x01){
						switch(LED2&=0x07){ //only care about first 3 bits
							case 0x00:	 
								LED2^=0x01; 
								break; // 000 XOR 001 = 001
							case 0x01:	
								LED2^=0x03; 
								break; // 001 XOR 011 = 010 
							case 0x02:	 
								LED2^=0x01; 
								break; // 010 XOR 001 = 011
							case 0x03:	 
								LED2^=0x07; 
								break; // 011 XOR 111 = 100
							case 0x04:	 
								LED2^=0x01; 
								break; // 100 XOR 001 = 101
							case 0x05:	 
								LED2^=0x03; 
								break; // 101 XOR 011 = 110
							case 0x06:	 
								LED2^=0x01; 
								break; // 110 XOR 001 = 111
							case 0x07:	 
								LED2^=0x07; 
								break; // 111 XOR 111 = 000
						}
					}
				}
			}
		}